
declare module 'unzip2' {
    /** Declaration file generated by dts-gen */

    export class Extract {
        constructor(opts: any);

    }

    export class Parse {
        constructor(opts: any);

        addListener(type: any, listener: any): any;

        on(type: any, listener: any): any;

        pipe(dest: any, opts: any, ...args: any[]): any;

        static create: any;

    }

    export namespace Extract {
        namespace prototype {
            const destroyed: boolean;

            const domain: any;

            function addListener(type: any, listener: any): any;

            function cork(): void;

            function destroy(err: any, cb: any): any;

            function emit(type: any, ...args: any[]): any;

            function end(chunk: any, encoding: any, cb: any): void;

            function eventNames(): any;

            function getMaxListeners(): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function pipe(): void;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function setDefaultEncoding(encoding: any): any;

            function setMaxListeners(n: any): any;

            function uncork(): void;

            function write(chunk: any, encoding: any, cb: any): any;

            namespace addListener {
                const prototype: {
                };

            }

            namespace cork {
                const prototype: {
                };

            }

            namespace destroy {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace end {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace pipe {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace setDefaultEncoding {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

            namespace uncork {
                const prototype: {
                };

            }

            namespace write {
                const prototype: {
                };

            }

        }

    }

    export namespace Parse {
        namespace prototype {
            const destroyed: boolean;

            const domain: any;

            function addListener(type: any, listener: any): any;

            function cork(): void;

            function destroy(err: any, cb: any): any;

            function emit(type: any, ...args: any[]): any;

            function end(chunk: any, encoding: any, cb: any): void;

            function eventNames(): any;

            function getMaxListeners(): any;

            function isPaused(): any;

            function listenerCount(type: any): any;

            function listeners(type: any): any;

            function on(type: any, listener: any): any;

            function once(type: any, listener: any): any;

            function pause(): any;

            function pipe(dest: any, opts: any, ...args: any[]): any;

            function prependListener(type: any, listener: any): any;

            function prependOnceListener(type: any, listener: any): any;

            function push(chunk: any, encoding: any): any;

            function read(n: any): any;

            function removeAllListeners(type: any, ...args: any[]): any;

            function removeListener(type: any, listener: any): any;

            function resume(): any;

            function setDefaultEncoding(encoding: any): any;

            function setEncoding(enc: any): any;

            function setMaxListeners(n: any): any;

            function uncork(): void;

            function unpipe(dest: any): any;

            function unshift(chunk: any): any;

            function wrap(stream: any, ...args: any[]): any;

            function write(chunk: any, encoding: any, cb: any): any;

            namespace addListener {
                const prototype: {
                };

            }

            namespace cork {
                const prototype: {
                };

            }

            namespace destroy {
                const prototype: {
                };

            }

            namespace emit {
                const prototype: {
                };

            }

            namespace end {
                const prototype: {
                };

            }

            namespace eventNames {
                const prototype: {
                };

            }

            namespace getMaxListeners {
                const prototype: {
                };

            }

            namespace isPaused {
                const prototype: {
                };

            }

            namespace listenerCount {
                const prototype: {
                };

            }

            namespace listeners {
                const prototype: {
                };

            }

            namespace on {
                const prototype: {
                };

            }

            namespace once {
                const prototype: {
                };

            }

            namespace pause {
                const prototype: {
                };

            }

            namespace pipe {
                const prototype: {
                };

            }

            namespace prependListener {
                const prototype: {
                };

            }

            namespace prependOnceListener {
                const prototype: {
                };

            }

            namespace push {
                const prototype: {
                };

            }

            namespace read {
                const prototype: {
                };

            }

            namespace removeAllListeners {
                const prototype: {
                };

            }

            namespace removeListener {
                const prototype: {
                };

            }

            namespace resume {
                const prototype: {
                };

            }

            namespace setDefaultEncoding {
                const prototype: {
                };

            }

            namespace setEncoding {
                const prototype: {
                };

            }

            namespace setMaxListeners {
                const prototype: {
                };

            }

            namespace uncork {
                const prototype: {
                };

            }

            namespace unpipe {
                const prototype: {
                };

            }

            namespace unshift {
                const prototype: {
                };

            }

            namespace wrap {
                const prototype: {
                };

            }

            namespace write {
                const prototype: {
                };

            }

        }

    }
}
